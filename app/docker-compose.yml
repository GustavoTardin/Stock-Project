version: '3.1'

services:
  frontend:
    container_name: Stock_Project_frontend
    build:
      context: ./frontend
    ports:
      - 3000:3000
    working_dir: /frontend
    networks:
      - stock-app
    environment:
      DATABASE_URL: ${DATABASE_URL}
    volumes:
      - ./frontend:/app/frontend
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"]
      interval: 10s
      timeout: 10s
      retries: 5

  backend:
    container_name: stock_Project_backend
    build:
      context: ./backend
    restart: always
    ports:
      - 3009:3009
    working_dir: /backend
    environment:
      DATABASE_URL: ${DATABASE_URL}
    networks:
      - stock-app
    volumes:
      - ./backend:/app/backend
    command: dev
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3009"]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    container_name: stock_project_database
    image: postgres:14.3
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - stock-app
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE

networks:
  stock-app:
